{"version":3,"sources":["js/delay.js","js/toggle_user.js","js/transactions.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","all","table","randomIntegerFromInterval","min","max","Math","floor","random","transaction","makeTransaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAAA,MAAMA,EAASC,GACJ,IAAIC,QAAQC,IACfC,WAAW,KACPD,EAAQF,IACTA,KAGLI,EAASJ,GAAMK,QAAQC,sBAAsBN,OAGnDD,EAAM,KAAMQ,KAAKH,GACjBL,EAAM,KAAMQ,KAAKH,GACjBL,EAAM,MAAMQ,KAAKH;;ACZjB,MAAMI,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,CAACC,EAAUC,KACzBC,MAAAA,EAAeF,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAE1Df,OAAAA,QAAQgB,IAAIH,IAGjBV,EAASU,GAAgBT,QAAQa,MAAMJ,GAE7CH,EAAgBH,EAAO,SAASD,KAAKH,GACrCO,EAAgBH,EAAO,OAAOD,KAAKH;;ACjBnC,MAAMe,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAc,GAEpB,SAASC,EAAgBD,GACd,OAAA,IAAIxB,QAAQ,CAACC,EAASyB,KACnB5B,MAAAA,EAAQoB,EAA0B,IAAK,KAC7ChB,WAAW,KACYmB,KAAKE,SAAW,IAE/BtB,EAAQ,CAAE0B,GAAIH,EAAYG,GAAI7B,MAAOA,IAEzC4B,EAAOF,EAAYG,KACpB7B,KAIX,SAAS8B,GAAW,GAAED,EAAF,MAAM7B,IACtBM,QAAQC,mBAAmBsB,kBAAmB7B,OAGlD,SAAS+B,EAASF,GACdvB,QAAQ0B,qCAAqCH,8BAGjDF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC7BzB,KAAKsB,GACLI,MAAMH,GAEXJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC7BzB,KAAKsB,GACLI,MAAMH,GAEXJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAC7BzB,KAAKsB,GACLI,MAAMH,GAEXJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC7BzB,KAAKsB,GACLI,MAAMH;;ACvCX,aAFA,QAAA,cACA,QAAA,oBACA,QAAA","file":"src.26da1af9.js","sourceRoot":"../src","sourcesContent":["const delay = (ms) => {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    })\n};\nconst logger = ms => console.log(`Resolved after ${ms}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n\n","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    return Promise.all(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst transaction = {};\n\nfunction makeTransaction(transaction) {\n    return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n                resolve({ id: transaction.id, delay: delay });\n            }\n            reject(transaction.id);\n        }, delay);\n    });\n};\n\nfunction logSuccess({ id, delay }) {\n    console.log(`Transaction ${id} processed in ${delay}ms`);\n};\n\nfunction logError(id) {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);\n","import './js/delay';\nimport './js/toggle_user';\nimport './js/transactions';\n"]}